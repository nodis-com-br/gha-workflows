name: publish-docker-image

on:
  workflow_call:
    secrets:
      openvpn_config:
        description: ''
        required: true
      gh_packages_token:
        description: ''
        required: true
    inputs:
      pip_index_url:
        type: string
        description: ''
        required: false
        default: https://pypi.nodis.com.br/simple
jobs:
  publish_docker_image:
    runs-on: ubuntu-latest
    if: contains('push workflow_dispatch', github.event_name) && !contains(github.event.head_commit.message, 'skip_ci')
    steps:
      - run: env | sort
      - name: Checkout repository
        uses: actions/checkout@main
        with:
          ref: ${{ github.ref }}
      - name: Load project metadata to environment variables
        uses: nodis-com-br/gha-metadata-load@master
      - name: Login to Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Connect to VPN
        uses: nodis-com-br/gha-openvpn@master
        with:
          openvpn_config: ${{ secrets.openvpn_config }}
      - name: Build and push image
        run: |
          if [[ ${NODIS_TARGET_BRANCH} == "refs/heads/master" ]] && [[ ${NODIS_DOCKER_BUILD_FROM_MASTER} == "false" ]]; then
            if [[ -n ${NODIS_VALIDATED_VERSION} ]]; then
              if docker pull ${NODIS_DOCKER_IMAGE_NAME}:${NODIS_VALIDATED_VERSION}; then
                docker tag ${NODIS_DOCKER_IMAGE_NAME}:${NODIS_VALIDATED_VERSION} ${NODIS_DOCKER_IMAGE_NAME}:${NODIS_PROJECT_VERSION}
                docker push ${NODIS_DOCKER_IMAGE_NAME}:${NODIS_PROJECT_VERSION}
              else
                echo "Error downloading container image ${NODIS_DOCKER_IMAGE_NAME}:${NODIS_VALIDATED_VERSION}!!!"
                exit 1
              fi
            else
              echo "Error: Missing NODIS_VALIDATED_VERSION environment variable!!!"
              exit 1
            fi
          else
            docker build . -t ${NODIS_DOCKER_IMAGE_NAME} --build-arg GITHUB_ACTOR=${{ github.actor }} --build-arg GITHUB_TOKEN=${{ secrets.GH_PACKAGES_TOKEN }} --build-arg PIP_INDEX_URL=${{ inputs.pip_index_url }}
            for TAG in ${NODIS_DOCKER_IMAGE_TAGS}; do
              docker tag ${NODIS_DOCKER_IMAGE_NAME} ${NODIS_DOCKER_IMAGE_NAME}:${TAG}
              docker push ${NODIS_DOCKER_IMAGE_NAME}:${TAG}
            done
          fi
        shell: bash